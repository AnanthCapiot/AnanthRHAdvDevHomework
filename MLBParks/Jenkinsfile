// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev:v3.9",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    
    // Define Maven Command. Make sure it points to the correct
	// settings for our Nexus installation (use the service to
	// bypass the router). The file nexus_openshift_settings.xml
	// needs to be in the Source Code repository.
	def mvnCmd = "mvn -s ../nexus_settings.xml"
	
	// Checkout Source Code
	stage('Checkout Source') {
		git url:"https://github.com/AnanthCapiot/${GUID}AdvDevHomework.git"
	}
	
	dir('MLBParks') {
		// The following variables need to be defined at the top level
		// and not inside the scope of a stage - otherwise they would not
		// be accessible from other stages.
		echo "Current directory is:"
		sh "pwd"
		echo "Listing current directory"  	  
		sh "ls -lrt"
		echo "Completed listing dir"
		// Extract version and other properties from the pom.xml
		def groupId    = getGroupIdFromPom("pom.xml")
		def artifactId = getArtifactIdFromPom("pom.xml")
		def version    = getVersionFromPom("pom.xml")

		// Set the tag for the development image: version + build number
		def devTag  = "${version}-${BUILD_NUMBER}"
	  
		// Set the tag for the production image: version
		def prodTag = "${version}"

		// Using Maven build the war file
		// Do not run tests in this step
		stage('Build war') {
			echo "Current directory is:"
			sh "pwd"
			echo "Building version ${version}"
			sh "${mvnCmd} clean package -DskipTests"	
		}
		
		// Using Maven run the unit tests
		stage('Unit Tests') {
			echo "Running Unit Tests"
			sh "${mvnCmd} test"    
		}

		// Using Maven call SonarQube for Code Analysis
		stage('Code Analysis') {
			echo "Running Code Analysis"
			sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"    
		}
		
		// Publish the built war file to Nexus
		stage('Publish to Nexus') {
			echo "Publish to Nexus"
			sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"   
			echo ">>>>>>>>>> Completed Publishing to Nexus <<<<<<<<<<"
		}	  
	  
		// Build the OpenShift Image in OpenShift and tag it.
		stage('Build and Tag OpenShift Image') {
			echo "Building OpenShift container image mlbparks:${devTag}"  
			sh "oc start-build mlbparks --follow --from-file=./target/mlbparks.war -n ${GUID}-parks-dev"  
			
			openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'			
		}

		// Deploy the built image to the Development Environment.
		stage('Deploy MLBParks to Dev') {
			echo "Deploying MLBParks container image to Development Project"    
			// Update the Image on the Development Deployment Config
			sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"
			
			// Deploy the development application.	
			openshiftDeploy depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
			openshiftVerifyDeployment depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
			openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'mlbparks', verbose: 'false'
		}  
		
		// Run Integration Tests in the Development Environment.
		stage('Integration Tests') {
			echo "Running Integration Tests"    
			sh "curl -i GET http://mlbparks-${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/healthz"
		}
		  
		// Copy Image to Nexus Docker Registry
		stage('Copy Image to Nexus Docker Registry') {
			echo "Copy image to Nexus Docker Registry"    
			sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/mlbparks:${devTag}"

			// Tag the built image with the production tag.	
			openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'	
		}
		
		// Blue/Green Deployment into Production
		// -------------------------------------
		// Do not activate the new version yet.
		def destApp   = "mlbparks-green"
		def activeApp = ""

		stage('Blue/Green Production Deployment') {

		  activeApp = sh(returnStdout: true, script: "oc get route mlbparks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
		  if (activeApp == "mlbparks-green") {
			destApp = "mlbparks-blue"
		  }
		  echo "Active Application:      " + activeApp
		  echo "Destination Application: " + destApp

		  echo "The destination app is: ${destApp} and prod version tag is: ${prodTag}..."
		  
		  // Update the Image on the Production Deployment Config
		  sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${prodTag} -n ${GUID}-parks-prod"

		  sh "oc delete configmap prod-application-mongodb-config-map -n ${GUID}-parks-prod --ignore-not-found=true"
		  sh "oc create configmap prod-application-mongodb-config-map --from-literal='prod-mongodb-connection.properties=Placeholder' -n ${GUID}-parks-prod"
		  sh "oc env dc/${destApp} --from=configmap/prod-application-mongodb-config-map -n ${GUID}-parks-prod"

		  // Deploy the inactive application. 
		  openshiftDeploy depCfg: ${destApp}, namespace: '${GUID}-parks-prod', verbose: 'true', waitTime: '', waitUnit: 'sec'
		  openshiftVerifyDeployment depCfg: ${destApp}, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'true', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
		  openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: ${destApp}, verbose: 'true'
		  
		}
	 }
  }  
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
